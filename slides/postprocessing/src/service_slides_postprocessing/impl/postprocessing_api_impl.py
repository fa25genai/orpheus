import datetime
import os.path
import pathlib
from base64 import b64decode
from typing import List

from fastapi import HTTPException
from pydantic import StrictStr, Field
from typing_extensions import Annotated

from service_slides_postprocessing.impl.helper.slidev_helper import SlidevHelper
from service_slides_postprocessing.impl.helper.url_helper import UrlHelper
from service_slides_postprocessing.models.get_slideset200_response import GetSlideset200Response
from service_slides_postprocessing.models.store_slideset_request import StoreSlidesetRequest
from service_slides_postprocessing.apis.postprocessing_api_base import BasePostprocessingApi
from service_slides_postprocessing.impl.helper.path_helper import FilePathHelper
from service_slides_postprocessing.models.list_slidesets200_response_inner import (
    ListSlidesets200ResponseInner,
)
from service_slides_postprocessing.models.slideset_with_id import SlidesetWithId
from service_slides_postprocessing.models.upload_accepted_response import UploadAcceptedResponse


class ImplPostprocessingApi(BasePostprocessingApi):
    def __init_subclass__(cls, **kwargs):
        super().__init_subclass__(**kwargs)

    async def store_slideset(
        self, store_slideset_request: StoreSlidesetRequest
    ) -> UploadAcceptedResponse:
        url_helper = UrlHelper()
        path_helper = FilePathHelper()
        slidev_helper = SlidevHelper(store_slideset_request.slideset.prompt_id)
        slideset = store_slideset_request.slideset

        # Step 1: Store uploaded data as is
        pathlib.Path(path_helper.get_markdown_directory(slideset.prompt_id)).mkdir(
            parents=True, exist_ok=True
        )

        original_path = path_helper.get_markdown_file(slideset.prompt_id, "original")
        with open(original_path, "w", encoding="utf-8") as f:
            f.write(slideset.slideset)

        for asset in slideset.assets:
            with open(path_helper.get_asset_file(slideset.prompt_id, asset.path), "b+w") as f:
                f.write(b64decode(asset.data))

        # Step 2: Build HTML/Web distribution with theme
        theme_path = path_helper.get_theme_path(store_slideset_request.theme)

        slidev_helper.build_web_distribution(
            path_helper.get_markdown_directory(slideset.prompt_id),
            original_path,
            path_helper.get_web_directory(slideset.prompt_id),
            theme_path,
            os.path.relpath(
                path_helper.get_web_directory(slideset.prompt_id), path_helper.base_path
            ),
        )

        # Step 3: Export PDF
        # prefix_slide = ("---\ntheme: {theme_path if theme_path else \"slidev-default\"}\nlayout: fact\n---\n# These slides are generated by AI.\n")
        # pdf_source_path = path_helper.get_markdown_file(slideset.prompt_id, "export")
        # with open(pdf_source_path, "w", encoding="utf-8") as f:
        #    f.write(prefix_slide)
        #    f.write(original_content)

        # slidev_helper.export_pdf(
        #    path_helper.get_markdown_directory(slideset.prompt_id),
        #    pdf_source_path,
        #    path_helper.get_export_path(slideset.prompt_id),
        # )

        return UploadAcceptedResponse(
            promptId=slideset.prompt_id,
            createdAt=datetime.datetime.now(),
            webUrl=url_helper.get_storage_url(path_helper.get_web_directory(slideset.prompt_id)),
            pdfUrl=None,  # url_helper.get_storage_url(path_helper.get_export_path(slideset.prompt_id)),
        )

    async def get_slideset(
        self,
        promptId: Annotated[
            StrictStr, Field(description="The promptId for the requested slideset")
        ],
    ) -> GetSlideset200Response:
        url_helper = UrlHelper()
        path_helper = FilePathHelper()

        original_content_path = path_helper.get_markdown_file(promptId, "original")
        if not os.path.isfile(original_content_path):
            raise HTTPException(status_code=404)

        with open(original_content_path, "r", encoding="utf-8") as f:
            original_content = f.read()

        # TODO: Add assets, but not relevant for MVP

        return GetSlideset200Response(
            webUrl=url_helper.get_storage_url(path_helper.get_web_directory(promptId)),
            pdfUrl=None,
            slideset=SlidesetWithId(promptId=promptId, slideset=original_content, assets=[]),
        )

    async def list_slidesets(self) -> List[ListSlidesets200ResponseInner]:
        return FilePathHelper().list_markdown_slides()
