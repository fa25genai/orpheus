# coding: utf-8

"""
Orpheus Slide-Postprocessing-Service API

API for the Orpheus slide postprocessing and delivery. From the repository: \"The Orpheus System transforms static slides into interactive lecture videos with lifelike professor avatars, combining expressive narration, visual presence, and dynamic content to create engaging, personalized learning experiences.\" License: MIT (see repository).

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import logging
import os
from typing import Any

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

from service_slides_postprocessing.apis.postprocessing_api import router as PostprocessingApiRouter

_log = logging.getLogger("app")


async def lifespan(app: FastAPI) -> Any:
    _log.info("Setting up **Slide Postprocessing Service**")

    yield

    # Teardown code goes here
    _log.info("Exiting **Slide Postprocessing Service**")


logging.basicConfig(
    level=logging.DEBUG if os.getenv("DEBUG") else logging.INFO,
    format="%(asctime)s %(levelname)s: %(message)s",
    datefmt="%m/%d/%Y %I:%M:%S %p",
)


app = FastAPI(
    title="Orpheus Slide-Postprocessing-Service API",
    description="API for the Orpheus slide postprocessing and delivery. From the repository: \&quot;The Orpheus System transforms static slides into interactive lecture videos with lifelike professor avatars, combining expressive narration, visual presence, and dynamic content to create engaging, personalized learning experiences.\&quot; License: MIT (see repository). ",
    version="0.1.0",
    lifespan=lifespan,
)

origins = ["*"]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.include_router(PostprocessingApiRouter)
