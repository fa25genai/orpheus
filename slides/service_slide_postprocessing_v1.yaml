openapi: 3.1.0
info:
  title: Orpheus Slide-postprocessing-Service API
  version: "0.1.0"
  description: |
    API for the Orpheus slide postprocessing and delivery.
    From the repository: "The Orpheus System transforms static slides into interactive lecture videos with lifelike professor avatars, combining expressive narration, visual presence, and dynamic content to create engaging, personalized learning experiences."
    License: MIT (see repository).
  termsOfService: "https://github.com/fa25genai/orpheus"
  contact:
    name: "Orpheus Project"
    url: "https://github.com/fa25genai/orpheus/issues/new"
  license:
    name: MIT
    url: "https://opensource.org/licenses/MIT"

servers:
  - url: "http://localhost:30607"
    description: "Local development"
  - url: "http://orpheus-service-slidestore:8000"
    description: "DNS service name for in-cluster service"

tags:
  - name: postprocessing
    description: "Endpoints for slide and information about available slidesets"

paths:
  /v1/postprocessing:
    get:
      tags:
        - postprocessing
      summary: "Get the list of all previously stored slideset IDs"
      operationId: listSlidesets
      responses:
        "200":
          description: "List of available slidesets"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - promptId
                    - createdAt
                  properties:
                    promptId:
                      type: string
                      format: uuid
                    createdAt:
                      type: string
                      format: date-time
    put:
      tags:
        - postprocessing
      summary: "Store a slideset and perform postprocessing on the file"
      description: |
        Accepts a slideset in markdown format
      operationId: storeSlideset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - slideset
              properties:
                theme:
                  type: string
                  enum: ["default", "tum"]
                slideset:
                  $ref: "#/components/schemas/SlidesetWithId"
      responses:
        "200":
          description: "Slideset accepted and postprocessing complete."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadAcceptedResponse"
              examples:
                accepted:
                  summary: "Example accepted response"
                  value:
                    promptId: "db720a46-fbf1-4c74-bde5-464aab09ec7d"
                    createdAt: "2025-09-22T09:12:33Z"
        "400":
          description: "Malformed request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "Server error"
  /v1/postprocessing/{promptId}:
    get:
      tags:
        - postprocessing
      summary: "Get the markdown content of a previously stored slideset"
      parameters:
        - name: promptId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: "The promptId for the requested slideset"
      description: |
        Returns a slideset in markdown format
      operationId: getSlideset
      responses:
        "200":
          description: "Slideset available and known."
          content:
            application/json:
              schema:
                type: object
                required:
                  - slideset
                properties:
                  webUrl:
                    type: string
                    format: url
                  pdfUrl:
                    type: string
                    format: url
                  slideset:
                    $ref: "#/components/schemas/SlidesetWithId"
        "404":
          description: "Request not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    UserProfile:
      type: object
      description: "Schemaless additional information about the user (e.g. preferences regarding slide style)."
      additionalProperties: true

    SlidesetWithId:
      type: object
      required:
        - promptId
        - slideset
        - assets
      properties:
        promptId:
          type: string
          format: uuid
          description: >
            Unique identifier of the lecture to which the slides will belong.
        slideset:
          type: string
          description: >
            Markdown source code for the slideset. Has to conform to sli.dev syntax.
        user:
          $ref: "#/components/schemas/UserProfile"
        assets:
          type: array
          items:
            type: object
            required:
              - path
              - data
            properties:
              path:
                type: string
                description: File path of the asset
              data:
                type: string
                format: byte
                description: Base64 encoded raw data of the asset
          description: "Additional files: images, PDFs, graphs, tables, listings, equations. Use multiple entries for multiple files. May be empty."

    UploadAcceptedResponse:
      type: object
      properties:
        promptId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        webUrl:
          type: string
          format: url
        pdfUrl:
          type: string
          format: url

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string

externalDocs:
  description: "Project repository and README"
  url: "https://github.com/fa25genai/orpheus"

