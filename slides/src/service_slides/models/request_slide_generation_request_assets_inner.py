# coding: utf-8

"""
Orpheus Slide-Service API

API for the Orpheus slide generation. From the repository: \"The Orpheus System transforms static slides into interactive lecture videos with lifelike professor avatars, combining expressive narration, visual presence, and dynamic content to create engaging, personalized learning experiences.\" License: MIT (see repository).

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
from typing import Any, ClassVar, Dict, List, Optional, Union

from pydantic import BaseModel, Field, StrictBytes, StrictStr

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class RequestSlideGenerationRequestAssetsInner(BaseModel):
    """
    RequestSlideGenerationRequestAssetsInner
    """  # noqa: E501

    name: Optional[StrictStr] = Field(default=None, description="File name of the asset")
    asset_description: StrictStr = Field(description="Plain text description of the asset/it's contents", alias="assetDescription")
    mime_type: StrictStr = Field(description="MIME-Type name of the file type (e.g. image/png)", alias="mimeType")
    data: Union[StrictBytes, StrictStr] = Field(description="Base64 encoded raw data of the asset")
    __properties: ClassVar[List[str]] = ["name", "assetDescription", "mimeType", "data"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RequestSlideGenerationRequestAssetsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        """Create an instance of RequestSlideGenerationRequestAssetsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "assetDescription": obj.get("assetDescription"),
                "mimeType": obj.get("mimeType"),
                "data": obj.get("data"),
            }
        )
        return _obj
