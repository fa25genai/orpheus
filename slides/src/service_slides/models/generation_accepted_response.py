# coding: utf-8

"""
    Orpheus Slide-Service API

    API for the Orpheus slide generation. From the repository: \"The Orpheus System transforms static slides into interactive lecture videos with lifelike professor avatars, combining expressive narration, visual presence, and dynamic content to create engaging, personalized learning experiences.\" License: MIT (see repository). 

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from service_slides.models.slide_structure import SlideStructure
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GenerationAcceptedResponse(BaseModel):
    """
    Returned immediately after generation request accepted
    """ # noqa: E501
    lecture_id: Optional[StrictInt] = Field(default=None, alias="lectureId")
    status: Optional[StrictStr] = None
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    structure: Optional[SlideStructure] = Field(default=None, description="Structure preview for progressing other generation steps")
    __properties: ClassVar[List[str]] = ["lectureId", "status", "createdAt", "structure"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('IN_PROGRESS', 'FAILED', 'DONE',):
            raise ValueError("must be one of enum values ('IN_PROGRESS', 'FAILED', 'DONE')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GenerationAcceptedResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of structure
        if self.structure:
            _dict['structure'] = self.structure.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GenerationAcceptedResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "lectureId": obj.get("lectureId"),
            "status": obj.get("status"),
            "createdAt": obj.get("createdAt"),
            "structure": SlideStructure.from_dict(obj.get("structure")) if obj.get("structure") is not None else None
        })
        return _obj


