# coding: utf-8

"""
Orpheus Slide-Service API

API for the Orpheus slide generation. From the repository: \"The Orpheus System transforms static slides into interactive lecture videos with lifelike professor avatars, combining expressive narration, visual presence, and dynamic content to create engaging, personalized learning experiences.\" License: MIT (see repository).

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from pydantic import BaseModel, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from service_slides.models.request_slide_generation_request_assets_inner import (
    RequestSlideGenerationRequestAssetsInner,
)

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class RequestSlideGenerationRequest(BaseModel):
    """
    RequestSlideGenerationRequest
    """  # noqa: E501

    course_id: StrictStr = Field(
        description="Unique identifier of the course for which slides should be generated ",
        alias="courseId",
    )
    prompt_id: StrictStr = Field(
        description="Unique identifier of the prompt to which the slides will belong. ",
        alias="promptId",
    )
    lecture_script: StrictStr = Field(
        description="Plain text containing the details of the lecture (including examples and explanations). May have any format (i.e. human readable). ",
        alias="lectureScript",
    )
    user: Optional[Dict[str, Any]] = Field(
        default=None,
        description="Schemaless additional information about the user (e.g. preferences regarding slide style).",
    )
    assets: List[RequestSlideGenerationRequestAssetsInner] = Field(
        description="Additional files: images, PDFs, graphs, tables, listings, equations. Use multiple entries for multiple files. May be empty."
    )
    __properties: ClassVar[List[str]] = ["courseId", "promptId", "lectureScript", "user", "assets"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RequestSlideGenerationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in assets (list)
        _items = []
        if self.assets:
            for _item in self.assets:
                if _item:
                    _items.append(_item.to_dict())
            _dict["assets"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RequestSlideGenerationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "courseId": obj.get("courseId"),
                "promptId": obj.get("promptId"),
                "lectureScript": obj.get("lectureScript"),
                "user": obj.get("user"),
                "assets": [
                    RequestSlideGenerationRequestAssetsInner.from_dict(_item)
                    for _item in obj.get("assets")
                ]
                if obj.get("assets") is not None
                else None,
            }
        )
        return _obj
