openapi: 3.1.0
info:
  title: Document Intelligence API
  version: "0.1.0"
  description: |-
    API for the Orpheus document intelligence orchestration.
    From the repository: "The Orpheus System transforms static slides into interactive lecture videos with lifelike professor avatars, combining expressive narration, visual presence, and dynamic content to create engaging, personalized learning experiences."
    License: MIT (see repository).
  termsOfService: "https://github.com/fa25genai/orpheus"
  contact:
    name: "Orpheus Project"
    url: "https://github.com/fa25genai/orpheus/issues/new"
  license:
    name: MIT
    url: "https://opensource.org/licenses/MIT"

servers:
  - url: "http://localhost:30606"
    description: "Local development (random port chosen: 30606)"
  - url: "http://orpheus-service-docint:8080"
    description: "DNS service name for in-cluster service"

tags:
  - name: docint
    description: "Endpoints for document storage and retrieval."
  
paths:

  /v1/upload/{courseId}:
    post:
      tags:
        - docint
      summary: uploads document
      operationId: uploadsDocument
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the course to upload the content to."
      requestBody:
        required: true
        content:
          application/pdf:
            schema:
              type: string
              format: base64 
      responses:
        "201":
          description: Successfully uploaded. Returns created ID.
          content:
            application/json:
              schema:
                type: object
                properties:
                  documentId:
                    type: string
                    description: The ID of the stored document.
        "400":
          description: Bad Request â€“ missing file or parameters.
        "404":
          description: courseId not found.
        "413":
          description: Payload Too Large.
        "415":
          description: Unsupported Media Type (only PDFs accepted).
        "500":
          description: Server error.


  /v1/delete/{documentId}:
    delete:
      tags:
        - docint
      summary: deletes document
      operationId: deletesDocument
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the document to delete."
      responses:
            "200":
              description: "A successful response confirming deletion."
            "400":
              description: "Bad Request - The request is missing a required parameter."
            "404":
              description: "Not Found - The documentId was not found."

              
  /v1/retrieval/{courseId}:
    get:
      tags:
        - docint
      summary: provides relevant textual content and images
      operationId: retrievesDataForGeneration
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: string
          description: "The ID of the course to retrieve content from."
        - name: promptQuery
          in: query
          required: true
          schema:
            type: string
          description: "The user's query or prompt."
      responses:
            "200":
              description: "A successful response containing relevant content and images."
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/RetrievalResponse"
            "400":
              description: "Bad Request - The request is missing a required parameter."
            "404":
              description: "Not Found - The courseId was not found."

components:
  schemas:
    RetrievalResponse:
      type: object
      properties:
        content:
          type: array
          items:
            type: string
          description: "An array of text snippets."
        images:
          type: array
          items:
            $ref: "#/components/schemas/ImageObject"
          description: "An array of image objects."
    ImageObject:
      type: object
      properties:
        image:
          type: string
          contentMediaType: image/*
          contentEncoding: base64
          description: "Image"
        description:
          type: string
          description: "A short description of the image."