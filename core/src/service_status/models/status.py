# coding: utf-8

"""
Answer Generation Service API

API for the Orpheus core orchestration. From the repository: \"The Orpheus System transforms static slides into interactive prompt videos with lifelike professor avatars, combining expressive narration, visual presence, and dynamic content to create engaging, personalized learning experiences.\" License: MIT (see repository).

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from service_status.models.avatar_element_status import AvatarElementStatus
from service_status.models.slide_structure import SlideStructure
from service_status.models.step_status import StepStatus

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class Status(BaseModel):
    """
    Status
    """  # noqa: E501

    step_understanding: StepStatus = Field(alias="stepUnderstanding")
    step_lookup: StepStatus = Field(alias="stepLookup")
    step_lecture_script_generation: StepStatus = Field(alias="stepLectureScriptGeneration")
    step_slide_structure_generation: StepStatus = Field(alias="stepSlideStructureGeneration")
    step_slide_generation: StrictInt = Field(alias="stepSlideGeneration")
    step_slide_postprocessing: StepStatus = Field(alias="stepSlidePostprocessing")
    steps_avatar_generation: List[AvatarElementStatus] = Field(alias="stepsAvatarGeneration")
    lecture_summary: Optional[StrictStr] = Field(default=None, alias="lectureSummary")
    slide_structure: Optional[List[SlideStructure]] = Field(default=None, alias="slideStructure")
    __properties: ClassVar[List[str]] = ["stepUnderstanding", "stepLookup", "stepLectureScriptGeneration", "stepSlideStructureGeneration", "stepSlideGeneration", "stepSlidePostprocessing", "stepsAvatarGeneration", "lectureSummary", "slideStructure"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Status from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in steps_avatar_generation (list)
        _items = []
        if self.steps_avatar_generation:
            for _item in self.steps_avatar_generation:
                if _item:
                    _items.append(_item.to_dict())
            _dict['stepsAvatarGeneration'] = _items
        # override the default output from pydantic by calling `to_dict()` of slide_structure
        if self.slide_structure:
            _dict['slideStructure'] = self.slide_structure.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Status from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "stepUnderstanding": obj.get("stepUnderstanding"),
            "stepLookup": obj.get("stepLookup"),
            "stepLectureScriptGeneration": obj.get("stepLectureScriptGeneration"),
            "stepSlideStructureGeneration": obj.get("stepSlideStructureGeneration"),
            "stepSlideGeneration": obj.get("stepSlideGeneration"),
            "stepSlidePostprocessing": obj.get("stepSlidePostprocessing"),
            "stepsAvatarGeneration": [AvatarElementStatus.from_dict(_item) for _item in obj.get("stepsAvatarGeneration")] if obj.get("stepsAvatarGeneration") is not None else None,
            "lectureSummary": obj.get("lectureSummary"),
            "slideStructure": SlideStructure.from_dict(obj.get("slideStructure")) if obj.get("slideStructure") is not None else None
        })
        return _obj
