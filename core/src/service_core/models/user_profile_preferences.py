# coding: utf-8

"""
    Orpheus CoreAI-Service API

    API for the Orpheus core orchestration. From the repository: \"The Orpheus System transforms static slides into interactive lecture videos with lifelike professor avatars, combining expressive narration, visual presence, and dynamic content to create engaging, personalized learning experiences.\" License: MIT (see repository). 

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class UserProfilePreferences(BaseModel):
    """
    UserProfilePreferences
    """ # noqa: E501
    answer_length: Optional[StrictStr] = Field(default=None, alias="answerLength")
    language_level: Optional[StrictStr] = Field(default=None, alias="languageLevel")
    expertise_level: Optional[StrictStr] = Field(default=None, alias="expertiseLevel")
    include_pictures: Optional[StrictStr] = Field(default=None, alias="includePictures")
    __properties: ClassVar[List[str]] = ["answerLength", "languageLevel", "expertiseLevel", "includePictures"]

    @field_validator('answer_length')
    def answer_length_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('short', 'medium', 'long',):
            raise ValueError("must be one of enum values ('short', 'medium', 'long')")
        return value

    @field_validator('language_level')
    def language_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('basic', 'intermediate', 'advanced',):
            raise ValueError("must be one of enum values ('basic', 'intermediate', 'advanced')")
        return value

    @field_validator('expertise_level')
    def expertise_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('beginner', 'intermediate', 'advanced', 'expert',):
            raise ValueError("must be one of enum values ('beginner', 'intermediate', 'advanced', 'expert')")
        return value

    @field_validator('include_pictures')
    def include_pictures_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('none', 'few', 'many',):
            raise ValueError("must be one of enum values ('none', 'few', 'many')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UserProfilePreferences from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of UserProfilePreferences from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "answerLength": obj.get("answerLength"),
            "languageLevel": obj.get("languageLevel"),
            "expertiseLevel": obj.get("expertiseLevel"),
            "includePictures": obj.get("includePictures")
        })
        return _obj


