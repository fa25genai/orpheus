/* tslint:disable */
/* eslint-disable */
/**
 * Avatar Generation Service API
 * API for the Orpheus video generation. From the repository: \"The Orpheus System transforms static slides into interactive lecture videos with lifelike professor avatars, combining expressive narration, visual presence, and dynamic content to create engaging, personalized learning experiences.\" 
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AvatarCreatedResponse,
  AvatarImageResponse,
} from '../models/index';
import {
    AvatarCreatedResponseFromJSON,
    AvatarCreatedResponseToJSON,
    AvatarImageResponseFromJSON,
    AvatarImageResponseToJSON,
} from '../models/index';

export interface V1AvatarsAvatarIdImagesPostRequest {
    avatarId: string;
    file?: Blob;
}

export interface V1AvatarsPostRequest {
    file?: Blob;
}

/**
 * 
 */
export class AvatarApi extends runtime.BaseAPI {

    /**
     * Add an image to an existing avatar
     */
    async v1AvatarsAvatarIdImagesPostRaw(requestParameters: V1AvatarsAvatarIdImagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvatarImageResponse>> {
        if (requestParameters['avatarId'] == null) {
            throw new runtime.RequiredError(
                'avatarId',
                'Required parameter "avatarId" was null or undefined when calling v1AvatarsAvatarIdImagesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }


        let urlPath = `/v1/avatars/{avatarId}/images`;
        urlPath = urlPath.replace(`{${"avatarId"}}`, encodeURIComponent(String(requestParameters['avatarId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvatarImageResponseFromJSON(jsonValue));
    }

    /**
     * Add an image to an existing avatar
     */
    async v1AvatarsAvatarIdImagesPost(requestParameters: V1AvatarsAvatarIdImagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvatarImageResponse> {
        const response = await this.v1AvatarsAvatarIdImagesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new avatar record. Optionally, an image file can be uploaded at the same time. 
     * Create a new avatar
     */
    async v1AvatarsPostRaw(requestParameters: V1AvatarsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvatarCreatedResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }


        let urlPath = `/v1/avatars`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvatarCreatedResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new avatar record. Optionally, an image file can be uploaded at the same time. 
     * Create a new avatar
     */
    async v1AvatarsPost(requestParameters: V1AvatarsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvatarCreatedResponse> {
        const response = await this.v1AvatarsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
