/* tslint:disable */
/* eslint-disable */
/**
 * Service Video-Generation APIs
 * API for the Orpheus video generation. From the repository: \"The Orpheus System transforms static slides into interactive lecture videos with lifelike professor avatars, combining expressive narration, visual presence, and dynamic content to create engaging, personalized learning experiences.\" 
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GenerationAcceptedResponse,
  GenerationStatusResponse,
  RequestVideoGenerationRequest,
} from '../models/index';
import {
    GenerationAcceptedResponseFromJSON,
    GenerationAcceptedResponseToJSON,
    GenerationStatusResponseFromJSON,
    GenerationStatusResponseToJSON,
    RequestVideoGenerationRequestFromJSON,
    RequestVideoGenerationRequestToJSON,
} from '../models/index';

export interface GetGenerationResultRequest {
    promptId: string;
}

export interface RequestVideoGenerationOperationRequest {
    requestVideoGenerationRequest: RequestVideoGenerationRequest;
}

/**
 * 
 */
export class VideoApi extends runtime.BaseAPI {

    /**
     * Wait until video generation finishes and return the final result
     */
    async getGenerationResultRaw(requestParameters: GetGenerationResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerationStatusResponse>> {
        if (requestParameters['promptId'] == null) {
            throw new runtime.RequiredError(
                'promptId',
                'Required parameter "promptId" was null or undefined when calling getGenerationResult().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v1/video/{promptId}/status`;
        urlPath = urlPath.replace(`{${"promptId"}}`, encodeURIComponent(String(requestParameters['promptId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerationStatusResponseFromJSON(jsonValue));
    }

    /**
     * Wait until video generation finishes and return the final result
     */
    async getGenerationResult(requestParameters: GetGenerationResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerationStatusResponse> {
        const response = await this.getGenerationResultRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Accepts an array of messages written in fluent text. They are divided by slides. Accepts a courseId used to identify and pull the correct audio and image samples for generating the requested professor avatar. Accepts a promptId, a unique identifier for the generated video and slides. Accepts user profile information for adapting the video to the specific user needs. 
     * Request generation of a video, given the written text
     */
    async requestVideoGenerationRaw(requestParameters: RequestVideoGenerationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerationAcceptedResponse>> {
        if (requestParameters['requestVideoGenerationRequest'] == null) {
            throw new runtime.RequiredError(
                'requestVideoGenerationRequest',
                'Required parameter "requestVideoGenerationRequest" was null or undefined when calling requestVideoGeneration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/v1/video/generate`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestVideoGenerationRequestToJSON(requestParameters['requestVideoGenerationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerationAcceptedResponseFromJSON(jsonValue));
    }

    /**
     * Accepts an array of messages written in fluent text. They are divided by slides. Accepts a courseId used to identify and pull the correct audio and image samples for generating the requested professor avatar. Accepts a promptId, a unique identifier for the generated video and slides. Accepts user profile information for adapting the video to the specific user needs. 
     * Request generation of a video, given the written text
     */
    async requestVideoGeneration(requestParameters: RequestVideoGenerationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerationAcceptedResponse> {
        const response = await this.requestVideoGenerationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
