/* tslint:disable */
/* eslint-disable */
/**
 * Slide Generation Service API
 * API for the Orpheus slide generation. From the repository: \"The Orpheus System transforms static slides into interactive lecture videos with lifelike professor avatars, combining expressive narration, visual presence, and dynamic content to create engaging, personalized learning experiences.\" License: MIT (see repository). 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RequestSlideGenerationRequestAssetsInner } from './RequestSlideGenerationRequestAssetsInner';
import {
    RequestSlideGenerationRequestAssetsInnerFromJSON,
    RequestSlideGenerationRequestAssetsInnerFromJSONTyped,
    RequestSlideGenerationRequestAssetsInnerToJSON,
    RequestSlideGenerationRequestAssetsInnerToJSONTyped,
} from './RequestSlideGenerationRequestAssetsInner';

/**
 * 
 * @export
 * @interface RequestSlideGenerationRequest
 */
export interface RequestSlideGenerationRequest {
    /**
     * Unique identifier of the course for which slides should be generated
     * 
     * @type {string}
     * @memberof RequestSlideGenerationRequest
     */
    courseId: string;
    /**
     * Unique identifier of the prompt to which the slides will belong.
     * 
     * @type {string}
     * @memberof RequestSlideGenerationRequest
     */
    promptId: string;
    /**
     * Plain text containing the details of the lecture (including examples and explanations). May have any format (i.e. human readable).
     * 
     * @type {string}
     * @memberof RequestSlideGenerationRequest
     */
    lectureScript: string;
    /**
     * Schemaless additional information about the user (e.g. preferences regarding slide style).
     * @type {object}
     * @memberof RequestSlideGenerationRequest
     */
    user?: object;
    /**
     * Additional files: images, PDFs, graphs, tables, listings, equations. Use multiple entries for multiple files. May be empty.
     * @type {Array<RequestSlideGenerationRequestAssetsInner>}
     * @memberof RequestSlideGenerationRequest
     */
    assets: Array<RequestSlideGenerationRequestAssetsInner>;
}

/**
 * Check if a given object implements the RequestSlideGenerationRequest interface.
 */
export function instanceOfRequestSlideGenerationRequest(value: object): value is RequestSlideGenerationRequest {
    if (!('courseId' in value) || value['courseId'] === undefined) return false;
    if (!('promptId' in value) || value['promptId'] === undefined) return false;
    if (!('lectureScript' in value) || value['lectureScript'] === undefined) return false;
    if (!('assets' in value) || value['assets'] === undefined) return false;
    return true;
}

export function RequestSlideGenerationRequestFromJSON(json: any): RequestSlideGenerationRequest {
    return RequestSlideGenerationRequestFromJSONTyped(json, false);
}

export function RequestSlideGenerationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RequestSlideGenerationRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'courseId': json['courseId'],
        'promptId': json['promptId'],
        'lectureScript': json['lectureScript'],
        'user': json['user'] == null ? undefined : json['user'],
        'assets': ((json['assets'] as Array<any>).map(RequestSlideGenerationRequestAssetsInnerFromJSON)),
    };
}

export function RequestSlideGenerationRequestToJSON(json: any): RequestSlideGenerationRequest {
    return RequestSlideGenerationRequestToJSONTyped(json, false);
}

export function RequestSlideGenerationRequestToJSONTyped(value?: RequestSlideGenerationRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'courseId': value['courseId'],
        'promptId': value['promptId'],
        'lectureScript': value['lectureScript'],
        'user': value['user'],
        'assets': ((value['assets'] as Array<any>).map(RequestSlideGenerationRequestAssetsInnerToJSON)),
    };
}

