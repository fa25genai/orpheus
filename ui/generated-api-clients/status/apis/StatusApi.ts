/* tslint:disable */
/* eslint-disable */
/**
 * Answer Generation Service API
 * API for the Orpheus core orchestration. From the repository: \"The Orpheus System transforms static slides into interactive prompt videos with lifelike professor avatars, combining expressive narration, visual presence, and dynamic content to create engaging, personalized learning experiences.\" License: MIT (see repository). 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Status,
  StatusPatch,
} from '../models/index';
import {
    StatusFromJSON,
    StatusToJSON,
    StatusPatchFromJSON,
    StatusPatchToJSON,
} from '../models/index';

export interface GetStatusRequest {
    promptId: string;
}

export interface UpdateStatusRequest {
    promptId: string;
    statusPatch: StatusPatch;
}

/**
 * 
 */
export class StatusApi extends runtime.BaseAPI {

    /**
     * Returns the current status of a generation job. If a job is unknown, then the initial status is returned. The current value is also subscribable by opening a websocket to `/status/{promptId}/live`. There the status object is pushed as it is described by this endpoint whenever it is updated. 
     * Get the current status for a generation job
     */
    async getStatusRaw(requestParameters: GetStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters['promptId'] == null) {
            throw new runtime.RequiredError(
                'promptId',
                'Required parameter "promptId" was null or undefined when calling getStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/status/{promptId}`;
        urlPath = urlPath.replace(`{${"promptId"}}`, encodeURIComponent(String(requestParameters['promptId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Returns the current status of a generation job. If a job is unknown, then the initial status is returned. The current value is also subscribable by opening a websocket to `/status/{promptId}/live`. There the status object is pushed as it is described by this endpoint whenever it is updated. 
     * Get the current status for a generation job
     */
    async getStatus(requestParameters: GetStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.getStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Takes a status update and applies it to the current status. If a status is unknown, it creates a new object for it.
     * Updates the status for a generation job
     */
    async updateStatusRaw(requestParameters: UpdateStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['promptId'] == null) {
            throw new runtime.RequiredError(
                'promptId',
                'Required parameter "promptId" was null or undefined when calling updateStatus().'
            );
        }

        if (requestParameters['statusPatch'] == null) {
            throw new runtime.RequiredError(
                'statusPatch',
                'Required parameter "statusPatch" was null or undefined when calling updateStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/status/{promptId}/update`;
        urlPath = urlPath.replace(`{${"promptId"}}`, encodeURIComponent(String(requestParameters['promptId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: StatusPatchToJSON(requestParameters['statusPatch']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Takes a status update and applies it to the current status. If a status is unknown, it creates a new object for it.
     * Updates the status for a generation job
     */
    async updateStatus(requestParameters: UpdateStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateStatusRaw(requestParameters, initOverrides);
    }

}
