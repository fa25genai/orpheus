/* tslint:disable */
/* eslint-disable */
/**
 * Answer Generation Service API
 * API for the Orpheus core orchestration. From the repository: \"The Orpheus System transforms static slides into interactive prompt videos with lifelike professor avatars, combining expressive narration, visual presence, and dynamic content to create engaging, personalized learning experiences.\" License: MIT (see repository). 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AvatarElementStatus } from './AvatarElementStatus';
import {
    AvatarElementStatusFromJSON,
    AvatarElementStatusFromJSONTyped,
    AvatarElementStatusToJSON,
    AvatarElementStatusToJSONTyped,
} from './AvatarElementStatus';
import type { SlideStructure } from './SlideStructure';
import {
    SlideStructureFromJSON,
    SlideStructureFromJSONTyped,
    SlideStructureToJSON,
    SlideStructureToJSONTyped,
} from './SlideStructure';
import type { StepStatus } from './StepStatus';
import {
    StepStatusFromJSON,
    StepStatusFromJSONTyped,
    StepStatusToJSON,
    StepStatusToJSONTyped,
} from './StepStatus';

/**
 * 
 * @export
 * @interface Status
 */
export interface Status {
    /**
     * 
     * @type {StepStatus}
     * @memberof Status
     */
    stepUnderstanding: StepStatus;
    /**
     * 
     * @type {StepStatus}
     * @memberof Status
     */
    stepLookup: StepStatus;
    /**
     * 
     * @type {StepStatus}
     * @memberof Status
     */
    stepLectureScriptGeneration: StepStatus;
    /**
     * 
     * @type {StepStatus}
     * @memberof Status
     */
    stepSlideStructureGeneration: StepStatus;
    /**
     * 
     * @type {number}
     * @memberof Status
     */
    stepSlideGeneration: number;
    /**
     * 
     * @type {StepStatus}
     * @memberof Status
     */
    stepSlidePostprocessing: StepStatus;
    /**
     * 
     * @type {Array<AvatarElementStatus>}
     * @memberof Status
     */
    stepsAvatarGeneration: Array<AvatarElementStatus>;
    /**
     * 
     * @type {string}
     * @memberof Status
     */
    lectureSummary?: string;
    /**
     * 
     * @type {SlideStructure}
     * @memberof Status
     */
    slideStructure?: SlideStructure;
}



/**
 * Check if a given object implements the Status interface.
 */
export function instanceOfStatus(value: object): value is Status {
    if (!('stepUnderstanding' in value) || value['stepUnderstanding'] === undefined) return false;
    if (!('stepLookup' in value) || value['stepLookup'] === undefined) return false;
    if (!('stepLectureScriptGeneration' in value) || value['stepLectureScriptGeneration'] === undefined) return false;
    if (!('stepSlideStructureGeneration' in value) || value['stepSlideStructureGeneration'] === undefined) return false;
    if (!('stepSlideGeneration' in value) || value['stepSlideGeneration'] === undefined) return false;
    if (!('stepSlidePostprocessing' in value) || value['stepSlidePostprocessing'] === undefined) return false;
    if (!('stepsAvatarGeneration' in value) || value['stepsAvatarGeneration'] === undefined) return false;
    return true;
}

export function StatusFromJSON(json: any): Status {
    return StatusFromJSONTyped(json, false);
}

export function StatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): Status {
    if (json == null) {
        return json;
    }
    return {
        
        'stepUnderstanding': StepStatusFromJSON(json['stepUnderstanding']),
        'stepLookup': StepStatusFromJSON(json['stepLookup']),
        'stepLectureScriptGeneration': StepStatusFromJSON(json['stepLectureScriptGeneration']),
        'stepSlideStructureGeneration': StepStatusFromJSON(json['stepSlideStructureGeneration']),
        'stepSlideGeneration': json['stepSlideGeneration'],
        'stepSlidePostprocessing': StepStatusFromJSON(json['stepSlidePostprocessing']),
        'stepsAvatarGeneration': ((json['stepsAvatarGeneration'] as Array<any>).map(AvatarElementStatusFromJSON)),
        'lectureSummary': json['lectureSummary'] == null ? undefined : json['lectureSummary'],
        'slideStructure': json['slideStructure'] == null ? undefined : SlideStructureFromJSON(json['slideStructure']),
    };
}

export function StatusToJSON(json: any): Status {
    return StatusToJSONTyped(json, false);
}

export function StatusToJSONTyped(value?: Status | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'stepUnderstanding': StepStatusToJSON(value['stepUnderstanding']),
        'stepLookup': StepStatusToJSON(value['stepLookup']),
        'stepLectureScriptGeneration': StepStatusToJSON(value['stepLectureScriptGeneration']),
        'stepSlideStructureGeneration': StepStatusToJSON(value['stepSlideStructureGeneration']),
        'stepSlideGeneration': value['stepSlideGeneration'],
        'stepSlidePostprocessing': StepStatusToJSON(value['stepSlidePostprocessing']),
        'stepsAvatarGeneration': ((value['stepsAvatarGeneration'] as Array<any>).map(AvatarElementStatusToJSON)),
        'lectureSummary': value['lectureSummary'],
        'slideStructure': SlideStructureToJSON(value['slideStructure']),
    };
}

