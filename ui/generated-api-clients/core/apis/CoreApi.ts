/* tslint:disable */
/* eslint-disable */
/**
 * Orpheus CoreAI-Service API
 * API for the Orpheus core orchestration. From the repository: \"The Orpheus System transforms static slides into interactive lecture videos with lifelike professor avatars, combining expressive narration, visual presence, and dynamic content to create engaging, personalized learning experiences.\" License: MIT (see repository). 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PromptRequest,
  PromptResponse,
  SlideResponse,
  VideoResponse,
} from '../models/index';
import {
    PromptRequestFromJSON,
    PromptRequestToJSON,
    PromptResponseFromJSON,
    PromptResponseToJSON,
    SlideResponseFromJSON,
    SlideResponseToJSON,
    VideoResponseFromJSON,
    VideoResponseToJSON,
} from '../models/index';

export interface CreateLectureFromPromptRequest {
    promptRequest: PromptRequest;
}

export interface GetSlidesByLectureIdRequest {
    lectureId: string;
}

export interface GetVideoByLectureIdRequest {
    lectureId: string;
}

/**
 * 
 */
export class CoreApi extends runtime.BaseAPI {

    /**
     * Accepts a user prompt and initiates an asynchronous job to generate lecture content. Returns a unique lecture ID to track the job.
     * Submit a prompt to generate a lecture
     */
    async createLectureFromPromptRaw(requestParameters: CreateLectureFromPromptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptResponse>> {
        if (requestParameters['promptRequest'] == null) {
            throw new runtime.RequiredError(
                'promptRequest',
                'Required parameter "promptRequest" was null or undefined when calling createLectureFromPrompt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/core/prompt`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PromptRequestToJSON(requestParameters['promptRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromptResponseFromJSON(jsonValue));
    }

    /**
     * Accepts a user prompt and initiates an asynchronous job to generate lecture content. Returns a unique lecture ID to track the job.
     * Submit a prompt to generate a lecture
     */
    async createLectureFromPrompt(requestParameters: CreateLectureFromPromptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptResponse> {
        const response = await this.createLectureFromPromptRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the status or result of a slide generation job using the lecture ID.
     * Get the generated slides
     */
    async getSlidesByLectureIdRaw(requestParameters: GetSlidesByLectureIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SlideResponse>> {
        if (requestParameters['lectureId'] == null) {
            throw new runtime.RequiredError(
                'lectureId',
                'Required parameter "lectureId" was null or undefined when calling getSlidesByLectureId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/core/getSlides/{lectureId}`;
        urlPath = urlPath.replace(`{${"lectureId"}}`, encodeURIComponent(String(requestParameters['lectureId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SlideResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the status or result of a slide generation job using the lecture ID.
     * Get the generated slides
     */
    async getSlidesByLectureId(requestParameters: GetSlidesByLectureIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SlideResponse> {
        const response = await this.getSlidesByLectureIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the status or result of a video generation job using the lecture ID.
     * Get the generated video
     */
    async getVideoByLectureIdRaw(requestParameters: GetVideoByLectureIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VideoResponse>> {
        if (requestParameters['lectureId'] == null) {
            throw new runtime.RequiredError(
                'lectureId',
                'Required parameter "lectureId" was null or undefined when calling getVideoByLectureId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/core/getVideo/{lectureId}`;
        urlPath = urlPath.replace(`{${"lectureId"}}`, encodeURIComponent(String(requestParameters['lectureId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VideoResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the status or result of a video generation job using the lecture ID.
     * Get the generated video
     */
    async getVideoByLectureId(requestParameters: GetVideoByLectureIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VideoResponse> {
        const response = await this.getVideoByLectureIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
