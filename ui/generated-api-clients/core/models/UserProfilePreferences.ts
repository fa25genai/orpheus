/* tslint:disable */
/* eslint-disable */
/**
 * Answer Generation Service API
 * API for the Orpheus core orchestration. From the repository: \"The Orpheus System transforms static slides into interactive prompt videos with lifelike professor avatars, combining expressive narration, visual presence, and dynamic content to create engaging, personalized learning experiences.\" License: MIT (see repository). 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserProfilePreferences
 */
export interface UserProfilePreferences {
    /**
     * 
     * @type {string}
     * @memberof UserProfilePreferences
     */
    answerLength?: UserProfilePreferencesAnswerLengthEnum;
    /**
     * 
     * @type {string}
     * @memberof UserProfilePreferences
     */
    languageLevel?: UserProfilePreferencesLanguageLevelEnum;
    /**
     * 
     * @type {string}
     * @memberof UserProfilePreferences
     */
    expertiseLevel?: UserProfilePreferencesExpertiseLevelEnum;
    /**
     * 
     * @type {string}
     * @memberof UserProfilePreferences
     */
    includePictures?: UserProfilePreferencesIncludePicturesEnum;
}


/**
 * @export
 */
export const UserProfilePreferencesAnswerLengthEnum = {
    Short: 'short',
    Medium: 'medium',
    Long: 'long'
} as const;
export type UserProfilePreferencesAnswerLengthEnum = typeof UserProfilePreferencesAnswerLengthEnum[keyof typeof UserProfilePreferencesAnswerLengthEnum];

/**
 * @export
 */
export const UserProfilePreferencesLanguageLevelEnum = {
    Basic: 'basic',
    Intermediate: 'intermediate',
    Advanced: 'advanced'
} as const;
export type UserProfilePreferencesLanguageLevelEnum = typeof UserProfilePreferencesLanguageLevelEnum[keyof typeof UserProfilePreferencesLanguageLevelEnum];

/**
 * @export
 */
export const UserProfilePreferencesExpertiseLevelEnum = {
    Beginner: 'beginner',
    Intermediate: 'intermediate',
    Advanced: 'advanced',
    Expert: 'expert'
} as const;
export type UserProfilePreferencesExpertiseLevelEnum = typeof UserProfilePreferencesExpertiseLevelEnum[keyof typeof UserProfilePreferencesExpertiseLevelEnum];

/**
 * @export
 */
export const UserProfilePreferencesIncludePicturesEnum = {
    None: 'none',
    Few: 'few',
    Many: 'many'
} as const;
export type UserProfilePreferencesIncludePicturesEnum = typeof UserProfilePreferencesIncludePicturesEnum[keyof typeof UserProfilePreferencesIncludePicturesEnum];


/**
 * Check if a given object implements the UserProfilePreferences interface.
 */
export function instanceOfUserProfilePreferences(value: object): value is UserProfilePreferences {
    return true;
}

export function UserProfilePreferencesFromJSON(json: any): UserProfilePreferences {
    return UserProfilePreferencesFromJSONTyped(json, false);
}

export function UserProfilePreferencesFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserProfilePreferences {
    if (json == null) {
        return json;
    }
    return {
        
        'answerLength': json['answerLength'] == null ? undefined : json['answerLength'],
        'languageLevel': json['languageLevel'] == null ? undefined : json['languageLevel'],
        'expertiseLevel': json['expertiseLevel'] == null ? undefined : json['expertiseLevel'],
        'includePictures': json['includePictures'] == null ? undefined : json['includePictures'],
    };
}

export function UserProfilePreferencesToJSON(json: any): UserProfilePreferences {
    return UserProfilePreferencesToJSONTyped(json, false);
}

export function UserProfilePreferencesToJSONTyped(value?: UserProfilePreferences | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'answerLength': value['answerLength'],
        'languageLevel': value['languageLevel'],
        'expertiseLevel': value['expertiseLevel'],
        'includePictures': value['includePictures'],
    };
}

