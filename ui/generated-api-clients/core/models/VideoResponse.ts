/* tslint:disable */
/* eslint-disable */
/**
 * Orpheus CoreAI-Service API
 * API for the Orpheus core orchestration. From the repository: \"The Orpheus System transforms static slides into interactive lecture videos with lifelike professor avatars, combining expressive narration, visual presence, and dynamic content to create engaging, personalized learning experiences.\" License: MIT (see repository). 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface VideoResponse
 */
export interface VideoResponse {
    /**
     * 
     * @type {string}
     * @memberof VideoResponse
     */
    status?: VideoResponseStatusEnum;
    /**
     * The URL to the generated video. Only present if status is 'completed'.
     * @type {string}
     * @memberof VideoResponse
     */
    videoUrl?: string;
}


/**
 * @export
 */
export const VideoResponseStatusEnum = {
    Processing: 'processing',
    Completed: 'completed',
    Failed: 'failed'
} as const;
export type VideoResponseStatusEnum = typeof VideoResponseStatusEnum[keyof typeof VideoResponseStatusEnum];


/**
 * Check if a given object implements the VideoResponse interface.
 */
export function instanceOfVideoResponse(value: object): value is VideoResponse {
    return true;
}

export function VideoResponseFromJSON(json: any): VideoResponse {
    return VideoResponseFromJSONTyped(json, false);
}

export function VideoResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): VideoResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'status': json['status'] == null ? undefined : json['status'],
        'videoUrl': json['videoUrl'] == null ? undefined : json['videoUrl'],
    };
}

export function VideoResponseToJSON(json: any): VideoResponse {
    return VideoResponseToJSONTyped(json, false);
}

export function VideoResponseToJSONTyped(value?: VideoResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'status': value['status'],
        'videoUrl': value['videoUrl'],
    };
}

