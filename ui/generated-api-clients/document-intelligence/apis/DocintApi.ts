/* tslint:disable */
/* eslint-disable */
/**
 * Lecture Ingestion Service API
 * API for the Orpheus document intelligence orchestration. From the repository: \"The Orpheus System transforms static slides into interactive lecture videos with lifelike professor avatars, combining expressive narration, visual presence, and dynamic content to create engaging, personalized learning experiences.\" License: MIT (see repository).
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UploadResponse,
} from '../models/index';
import {
    UploadResponseFromJSON,
    UploadResponseToJSON,
} from '../models/index';

export interface DeletesDocumentRequest {
    documentId: string;
}

export interface UploadsDocumentRequest {
    courseId: string;
    body: Blob;
}

/**
 * 
 */
export class DocintApi extends runtime.BaseAPI {

    /**
     * Deletes a document
     */
    async deletesDocumentRaw(requestParameters: DeletesDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling deletesDocument().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v1/delete/{documentId}`;
        urlPath = urlPath.replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters['documentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a document
     */
    async deletesDocument(requestParameters: DeletesDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletesDocumentRaw(requestParameters, initOverrides);
    }

    /**
     * uploads a PDF document
     */
    async uploadsDocumentRaw(requestParameters: UploadsDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadResponse>> {
        if (requestParameters['courseId'] == null) {
            throw new runtime.RequiredError(
                'courseId',
                'Required parameter "courseId" was null or undefined when calling uploadsDocument().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling uploadsDocument().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/pdf';


        let urlPath = `/v1/upload/{courseId}`;
        urlPath = urlPath.replace(`{${"courseId"}}`, encodeURIComponent(String(requestParameters['courseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadResponseFromJSON(jsonValue));
    }

    /**
     * uploads a PDF document
     */
    async uploadsDocument(requestParameters: UploadsDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadResponse> {
        const response = await this.uploadsDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
